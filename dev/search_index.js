var documenterSearchIndex = {"docs":
[{"location":"#Relationals.jl","page":"Relationals.jl","title":"Relationals.jl","text":"","category":"section"},{"location":"#Simple,-fast-access-to-relational-data-sources.-Inspired-by-Rails-ActiveRecord.","page":"Relationals.jl","title":"Simple, fast access to relational data sources. Inspired by Rails ActiveRecord.","text":"","category":"section"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"Works with MySQL/SQLite/PostgreSQL (any DB APIs listed here). Supports querying, but does not yet fully support writing to data sources.","category":"page"},{"location":"#Basic-Usage","page":"Relationals.jl","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"using Relationals\n\nstruct Flower <: Relational\n    sepal_length::Float32\n    sepal_width::Float32\n    petal_length::Float32\n    petal_width::Float32\n    species::String\nend","category":"page"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"# Gets the first Flower record.\njulia> first(Flower)\nFlower(5.1f0, 3.5f0, 1.4f0, 0.2f0, \"Iris-setosa\")\n\n# Get all Flower records with \"sepal_length=5.9\" and limit to 2 records.\njulia> all(Flower, :sepal_length=>5.9; limit=2)\n3-element Vector{Flower}:\n Flower(5.9f0, 3.0f0, 4.2f0, 1.5f0, \"Iris-versicolor\")\n Flower(5.9f0, 3.2f0, 4.8f0, 1.8f0, \"Iris-versicolor\")","category":"page"},{"location":"#Advanced-Usage","page":"Relationals.jl","title":"Advanced Usage","text":"","category":"section"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"using Relationals, UUIDs\n\n@source \"sqlite.db\"\n\nstruct User <: Relational\n    id::Int\n    uuid::UUID\n    first_name::String\n    last_name::String\n    address_id::Int\nend\n@belongs_to User :address\n\nstruct Address <: Relational\n    id::Int\n    street::String\n    city::String\n    state::String\n    zip::String\nend\n@col Address :zip=>:zipcode\n\nstruct Product <: Relational\n    key::Int\n    name::String\n    manufacturer_id::Int\nend\n@tablename Product :items\n@pk Product :key\n\nstruct Manufacturer <: Relational\n    id::Int\n    name::String\n    admin_id::Int\nend\n@belongs_to Manufacturer :admin=>User\n@has_many Manufacturer :products","category":"page"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"# Gets the first Manufacturer record.\njulia> manufacturer = first(Manufacturer)\nManufacturer(1, \"Shire Product Co.\", 1)\n\njulia> user = getadmin(manufacturer)\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\", 1)\n\njulia> getaddress(user)\nAddress(1, \"1 Bagshot Row\", \"Shire\", \"Middle Earth\", \"37012\")\n\njulia> getproducts(manufacturer)\n2-element Vector{User}:\n  Product(1, \"Frying Pan\")\n  Product(2, \"Pipeweed\")","category":"page"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"The \"sqlite.db\" file can be found here:\nhttps://github.com/JuliaGraphQL/Relationals.jl/tree/master/docs","category":"page"},{"location":"#Queries","page":"Relationals.jl","title":"Queries","text":"","category":"section"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"The primary two functions for querying data are: first and all. These functions return a single record and a collection of records, respectively.","category":"page"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"CurrentModule = Relationals","category":"page"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"first","category":"page"},{"location":"#Base.first","page":"Relationals.jl","title":"Base.first","text":"first(T::Type{<:Relational}; kwargs...)\nfirst(T::Type{<:Relational}, cond::Int; kwargs...)\nfirst(T::Type{<:Relational}, cond::String; kwargs...)\nfirst(T::Type{<:Relational}, cond::Pair; kwargs...)\nfirst(T::Type{<:Relational}, cond::UUID; kwargs...)\nfirst(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nGets the first record of type T.\n\nExamples\n\n# Gets the first User record.\njulia> first(User)\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record with id=1.\njulia> first(User, 1)\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record where \"uuid IS NOT NULL\".\n> first(User, \"uuid IS NOT NULL\")\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record where last_name=\"Baggins\".\n> first(User, :last_name=>\"Baggins\")\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record where first_name=\"Bilbo\".\n> first(User, :first_name=>:Bilbo)\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record where uuid=\"c6dacd6f-0023-4aba-bf24-374f4042fc47\".\n> first(User, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"))\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record where id=1 and uuid=\"c6dacd6f-0023-4aba-bf24-374f4042fc47\".\n> first(User, (:id=>1, :uuid=>UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\")))\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record where last_name=\"Baggins\" and uuid is not null.\n> first(User, (:last_name=>:Baggins, \"uuid IS NOT NULL\"))\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record where last_name=\"Baggins\" and first_name is \"Frodo\" or \"Bilbo\". \n> first(User, (:last_name=>:Baggins, :first_name=>[\"Frodo\", \"Bilbo\"]))\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record where first_name=\"Frodo\" and (id > 1 OR last_name=\"Baggins\").\n> first(User, (:first_name=>:Frodo, \"id > 1 OR last_name='Baggins'\"))\nUser(2, UUID(\"0bb0cdc4-b1d3-43ac-93ad-693a94fc9ceb\"), \"Frodo\", \"Baggins\")\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"all","category":"page"},{"location":"#Base.all","page":"Relationals.jl","title":"Base.all","text":"all(T::Type{<:Relational}; kwargs...)\nall(T::Type{<:Relational}, cond::String; kwargs...)\nall(T::Type{<:Relational}, cond::Pair; kwargs...)\nall(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nGets a collection of records of type T.\n\nExamples\n\njulia> all(User)\n3-element Vector{User}:\n User(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\", 1)\n User(2, UUID(\"32002bdb-0435-42e4-9c7b-e7dea3162abb\"), \"Frodo\", \"Baggins\", 1)\n User(3, UUID(\"fe6fe463-10c0-4bbc-bb39-bbd6f55a9e06\"), \"Samwise\", \"Gamgee\", 2)\n\njulia> all(User, \"uuid IS NOT NULL\")\n3-element Vector{User}:\n User(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\", 1)\n User(2, UUID(\"32002bdb-0435-42e4-9c7b-e7dea3162abb\"), \"Frodo\", \"Baggins\", 1)\n User(3, UUID(\"fe6fe463-10c0-4bbc-bb39-bbd6f55a9e06\"), \"Samwise\", \"Gamgee\", 2)\n\njulia> all(User, :last_name=>\"Baggins\")\n2-element Vector{User}:\n User(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\", 1)\n User(2, UUID(\"32002bdb-0435-42e4-9c7b-e7dea3162abb\"), \"Frodo\", \"Baggins\", 1)\n\njulia> all(User, (\"uuid IS NOT NULL\", :last_name=>\"Baggins\"); limit=2)\n2-element Vector{User}:\n User(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\", 1)\n User(2, UUID(\"32002bdb-0435-42e4-9c7b-e7dea3162abb\"), \"Frodo\", \"Baggins\", 1)\n\n\n\n\n\n\n","category":"function"},{"location":"#Response-Formats","page":"Relationals.jl","title":"Response Formats","text":"","category":"section"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"There are several variants of first and all, depending on the format you want. ","category":"page"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"tfirst returns a NamedTuple (tall returns a vector of NamedTuples)\ndfirst returns a Dict (dall returns a vector of Dicts)\nffirst returns a DataFrame with one record  (fall returns a DataFrame of records)","category":"page"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"tfirst","category":"page"},{"location":"#Relationals.tfirst","page":"Relationals.jl","title":"Relationals.tfirst","text":"tfirst(T::Type{<:Relational}; kwargs...)\ntfirst(T::Type{<:Relational}, cond::Int; kwargs...)\ntfirst(T::Type{<:Relational}, cond::String; kwargs...)\ntfirst(T::Type{<:Relational}, cond::Pair; kwargs...)\ntfirst(T::Type{<:Relational}, cond::UUID; kwargs...)\ntfirst(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nIdentical to first, but returns the record as a NamedTuple.\n\nExample\n\njulia> tfirst(User)\n(id = 1, uuid = UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), first_name = \"Bilbo\", last_name = \"Baggins\", address_id = 1)\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"tall","category":"page"},{"location":"#Relationals.tall","page":"Relationals.jl","title":"Relationals.tall","text":"tall(T::Type{<:Relational}; kwargs...)\ntall(T::Type{<:Relational}, cond::String; kwargs...)\ntall(T::Type{<:Relational}, cond::Pair; kwargs...)\ntall(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nIdentical to all, but returns the records as a vector of NamedTuples.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"dfirst","category":"page"},{"location":"#Relationals.dfirst","page":"Relationals.jl","title":"Relationals.dfirst","text":"dfirst(T::Type{<:Relational}; kwargs...)\ndfirst(T::Type{<:Relational}, cond::Int; kwargs...)\ndfirst(T::Type{<:Relational}, cond::String; kwargs...)\ndfirst(T::Type{<:Relational}, cond::Pair; kwargs...)\ndfirst(T::Type{<:Relational}, cond::UUID; kwargs...)\ndfirst(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nIdentical to first, but returns the record as a Dict.\n\nExample\n\njulia> dfirst(User)\nDict{Any, Any} with 5 entries:\n  :address_id => 1\n  :id         => 1\n  :uuid       => UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\")\n  :last_name  => \"Baggins\"\n  :first_name => \"Bilbo\"\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"dall","category":"page"},{"location":"#Relationals.dall","page":"Relationals.jl","title":"Relationals.dall","text":"dall(T::Type{<:Relational}; kwargs...)\ndall(T::Type{<:Relational}, cond::String; kwargs...)\ndall(T::Type{<:Relational}, cond::Pair; kwargs...)\ndall(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nIdentical to all, but returns the records as a vector of Dicts.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"ffirst","category":"page"},{"location":"#Relationals.ffirst","page":"Relationals.jl","title":"Relationals.ffirst","text":"ffirst(T::Type{<:Relational}; kwargs...)\nffirst(T::Type{<:Relational}, cond::Int; kwargs...)\nffirst(T::Type{<:Relational}, cond::String; kwargs...)\nffirst(T::Type{<:Relational}, cond::Pair; kwargs...)\nffirst(T::Type{<:Relational}, cond::UUID; kwargs...)\nffirst(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nIdentical to first, but returns the record in a DataFrame.\n\nExample\n\njulia> ffirst(User)\n1×5 DataFrame\n Row │ id     uuid                               first_name  last_name  address_id \n     │ Int64  String                             String      String     Int64      \n─────┼─────────────────────────────────────────────────────────────────────────────\n   1 │     1  c6dacd6f-0023-4aba-bf24-374f4042…  Bilbo       Baggins             1\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"fall","category":"page"},{"location":"#Relationals.fall","page":"Relationals.jl","title":"Relationals.fall","text":"fall(T::Type{<:Relational}; kwargs...)\nfall(T::Type{<:Relational}, cond::String; kwargs...)\nfall(T::Type{<:Relational}, cond::Pair; kwargs...)\nfall(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nIdentical to all, but returns the records in a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"#Mutations","page":"Relationals.jl","title":"Mutations","text":"","category":"section"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"create","category":"page"},{"location":"#Relationals.create","page":"Relationals.jl","title":"Relationals.create","text":"create(T::Type{<:Relational}; kwargs...)\ncreate(T::Type{<:Relational}, cond::Pair; kwargs...)\ncreate(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nGets the first record of type T.\n\nExamples\n\n# Gets the first User record.\njulia> create(Manufacturer, :name=>\"Sauron Supplies\")\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record.\njulia> create(Manufacturer, (:name=>\"Sauron Supplies\", :admin_id=>1))\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"update","category":"page"},{"location":"#Relationals.update","page":"Relationals.jl","title":"Relationals.update","text":"update(T::Type{<:Relational}, key::Union{Int,UUID}, value::Pair; kwargs...)\nupdate(T::Type{<:Relational}, key::Union{Int,UUID}, values::Union{Tuple,AbstractArray}; kwargs...)\n\nUpdates the record matching the unique key (either :id of type Int or :uuid of type UUID) with value(s)\n\nExamples\n\n# Gets the first User record.\njulia> update(Manufacturer, 1, :name=>\"Sauron Supplies\")\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record.\njulia> update(Manufacturer, 1, (:name=>\"Sauron Supplies\", :admin_id=>1))\nUser(1, update(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"destroy","category":"page"},{"location":"#Relationals.destroy","page":"Relationals.jl","title":"Relationals.destroy","text":"destroy(T::Type{<:Relational}, key::Union{Int,UUID}; kwargs...)\n\nDelete the record matching the unique key (either :id of type Int or :uuid of type UUID).\n\nExamples\n\n# Gets the first User record.\njulia> destroy(Manufacturer, 1)\n\n\n\n\n\n","category":"function"},{"location":"#Data-sources","page":"Relationals.jl","title":"Data sources","text":"","category":"section"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"Relationals.jl supports MySQL abd SQLite files as data sources. The @source macro configures the data source connection. ","category":"page"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"@source","category":"page"},{"location":"#Relationals.@source","page":"Relationals.jl","title":"Relationals.@source","text":"@source(fname::String)\n@source(c::Expr)\n@source(key::QuoteNode, conn::Expr)\n@source(key::QuoteNode, fname::String)\n\nExamples\n\n# Configure a MySQL data source as the default.\n@source DBInterface.connect(\n    MySQL.Connection,\n    \"127.0.0.1\", \n    \"username\", \n    \"password\";\n    db=\"widgets\",\n    port=3306,\n)\n\n# Configure an SQLite data source only for the Product model.\n@source Product \"sqlite.db\"\n\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"tablename","category":"page"},{"location":"#Relationals.tablename","page":"Relationals.jl","title":"Relationals.tablename","text":"tablename(T::Type{<:Relational})\n\nReturns the table name of type T.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"getconnection","category":"page"},{"location":"#Relationals.getconnection","page":"Relationals.jl","title":"Relationals.getconnection","text":"getconnection(source_key)\n\nGets the database connection for \"source_key\".\n\n\n\n\n\ngetconnection(source_keys::Tuple)\n\nGets multiple database connections for \"source_keys\".\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"conn","category":"page"},{"location":"#Relationals.conn","page":"Relationals.jl","title":"Relationals.conn","text":"conn(T)\n\nGets the database connections for type T.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"count","category":"page"},{"location":"#Base.count","page":"Relationals.jl","title":"Base.count","text":"count(T::Type{<:Relational}; kwargs...)\ncount(T::Type{<:Relational}, cond::String; kwargs...)\ncount(T::Type{<:Relational}, cond::Pair; kwargs...)\ncount(T::Type{<:Relational}, conds::Union{Tuple,AbstractArray}; kwargs...)\n\nGets the count of matching records.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"updatemany","category":"page"},{"location":"#Relationals.updatemany","page":"Relationals.jl","title":"Relationals.updatemany","text":"updatemany(T::Type{<:Relational}, key::Union{Int,UUID}, value::Pair; kwargs...)\nupdatemany(T::Type{<:Relational}, key::Union{Int,UUID}, values::Union{Tuple,AbstractArray}; kwargs...)\n\nUpdates the record matching the unique key (either :id of type Int or :uuid of type UUID) with value(s)\n\nExamples\n\n# Gets the first User record.\njulia> update(Manufacturer, 1, :name=>\"Sauron Supplies\")\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n# Gets the first User record.\njulia> update(Manufacturer, 1, (:name=>\"Sauron Supplies\", :admin_id=>1))\nUser(1, update(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n\n\n\n\n","category":"function"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"@showsql","category":"page"},{"location":"#Relationals.@showsql","page":"Relationals.jl","title":"Relationals.@showsql","text":"showsql(relational_type::Symbol, field)\n\nshowsql macro - todo\n\n\n\n\n\n","category":"macro"},{"location":"#Relational-macros","page":"Relationals.jl","title":"Relational macros","text":"","category":"section"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"The @has_many and @belongs_to configure one-to-many and many-to-one relationships, respectively.","category":"page"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"@has_many","category":"page"},{"location":"#Relationals.@has_many","page":"Relationals.jl","title":"Relationals.@has_many","text":"@has_many(model_type::QuoteNode, attr_name::Expr)\n\nGenerates a function named \"get{attr_name}\" to retrieve a collection of objects that are mapped to the model object. \n\nExamples\n\n# Configure a \"getproducts\" function for a Manufacturer object.\n@has_many Manufacturer :products\n\n# Configure a \"getadmins\" function for a Manufacturer object.\n@has_many Manufacturer :admins=>User\n\n# Gets all products of a manufacturer.\njulia> getproducts(first(Manufacturer))\n2-element Vector{Product}:\n  Product(1, \"Frying Pan\")\n  Product(2, \"Pipeweed\")\n\n# Gets all admins of manufacturer.\njulia> getadmins(first(Manufacturer))\n2-element Vector{User}:\n  User(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n  User(2, UUID(\"0bb0cdc4-b1d3-43ac-93ad-693a94fc9ceb\"), \"Frodo\", \"Baggins\")\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"@belongs_to","category":"page"},{"location":"#Relationals.@belongs_to","page":"Relationals.jl","title":"Relationals.@belongs_to","text":"@belongs_to(model_type::QuoteNode, attr_name::Expr)\n\nGenerates a function named \"get{attr_name}\" to retrieve a single object that is mapped to the model object. \n\nExamples\n\n# Configure a \"getaddress\" function for a User object.\n@belongs_to User :address\n\n# Configure a \"getadmin\" function for a Manufacturer object.\n@belongs_to Manufacturer :admin=>User\n\n# Gets the address of a user.\njulia> getaddress(first(User))\nAddress(1, \"1 Bagshot Row\", \"Shire\", \"Middle Earth\", \"37012\")\n\n# Gets the location of a manufacturer.\njulia> getadmin(first(Manufacturer, 1))\nUser(1, UUID(\"c6dacd6f-0023-4aba-bf24-374f4042fc47\"), \"Bilbo\", \"Baggins\")\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"@pk","category":"page"},{"location":"#Relationals.@pk","page":"Relationals.jl","title":"Relationals.@pk","text":"pk(relational_type::Symbol, field)\n\npk macro - todo\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"@col","category":"page"},{"location":"#Relationals.@col","page":"Relationals.jl","title":"Relationals.@col","text":"col(relational_type::Symbol, field2col::Expr)\n\ncol macro - todo\n\n\n\n\n\n","category":"macro"},{"location":"#API-index","page":"Relationals.jl","title":"API index","text":"","category":"section"},{"location":"","page":"Relationals.jl","title":"Relationals.jl","text":"","category":"page"}]
}
